{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\apurv\\\\OneDrive\\\\Desktop\\\\JOB\\\\React\\\\HTTP Request\\\\src\\\\App.js\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMovieHandler = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null); // Earlier API used: https://swapi.dev/api/films/\n      // https://react-http-9dceb-default-rtdb.firebaseio.com/ >> dynamic api\n      // can be routed by adding /movies.json at end >> .json means sending request\n      // in json format otherwise request will fail\n\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n\n      const data = await response.json(); //console.log(response);\n\n      const transformedData = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date\n        };\n      });\n      setMovies(transformedData);\n    } catch (error) {\n      setError(error);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \"No Movie found\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, \"Loading......\");\n  }\n\n  async function addMovieHandler(movie) {\n    console.log(movie);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/apurv/OneDrive/Desktop/JOB/React/HTTP Request/src/App.js"],"names":["React","useEffect","useState","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovieHandler","response","fetch","ok","Error","data","json","transformedData","results","map","movie","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","content","length","addMovieHandler","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMW,iBAAiB,GAAGV,WAAW,CAAC,YAAY;AAChD,QAAI;AACFO,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR,CAFE,CAGF;AACA;AACA;AACA;;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;;AAEA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB,CAbE,CAcF;;AAEA,YAAMC,eAAe,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,KAAD,IAAW;AAClD,eAAO;AACLC,UAAAA,EAAE,EAAED,KAAK,CAACE,UADL;AAELC,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAFR;AAGLC,UAAAA,WAAW,EAAEJ,KAAK,CAACK,aAHd;AAILC,UAAAA,WAAW,EAAEN,KAAK,CAACO;AAJd,SAAP;AAMD,OAPuB,CAAxB;AAQAtB,MAAAA,SAAS,CAACY,eAAD,CAAT;AACD,KAzBD,CAyBE,OAAOT,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;;AACDD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GA9BoC,EA8BlC,EA9BkC,CAArC;AAgCAT,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAIA,MAAIkB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAd;;AAEA,MAAIxB,MAAM,CAACyB,MAAP,GAAgB,CAApB,EAAuB;AACrBD,IAAAA,OAAO,gBAAG,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAExB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACD;;AAED,MAAII,KAAJ,EAAW;AACToB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIpB,KAAJ,CAAV;AACD;;AAED,MAAIF,SAAJ,EAAe;AACbsB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAV;AACD;;AAED,iBAAeE,eAAf,CAA+BV,KAA/B,EAAsC;AACpCW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACD;;AAED,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAEU,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEpB,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUkB,OAAV,CAPF,CADF;AAWD;;AAED,eAAezB,GAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMovieHandler = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      // Earlier API used: https://swapi.dev/api/films/\n      // https://react-http-9dceb-default-rtdb.firebaseio.com/ >> dynamic api\n      // can be routed by adding /movies.json at end >> .json means sending request\n      // in json format otherwise request will fail\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong\");\n      }\n\n      const data = await response.json();\n      //console.log(response);\n\n      const transformedData = data.results.map((movie) => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date,\n        };\n      });\n      setMovies(transformedData);\n    } catch (error) {\n      setError(error);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n\n  let content = <p>No Movie found</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading......</p>;\n  }\n\n  async function addMovieHandler(movie) {\n    console.log(movie);\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}